str(y[1]) #This is the first of those 100 lists, containing 1 numeric vector of size 10000
str(y[[1]]) #This accesses the vector (in other words the first column)
tracemem(y)
for(i in 1:100) {
y[[i]] <- y[[i]] - means[i]
}
set.seed(1)
sample(LETTERS, 5)
setwd("~/GitHub/Statistics-Honours-Project/Data")
# Read in final data ---------------------------------------------------------
final_data <- read.csv("finaldata.csv", header = TRUE)
final_data <- final_data[,-1]
View(final_data)
View(final_data)
View(final_data)
View(final_data)
attributes(final_data)
table(final_data$name)
length(unique(final_data$name))
hist(table(final_data$name))
library(tidyverse)
predictive_data <- final_data %>% select() %>% mutate(serve_dif = )
install.packages("nycflights13")
# Tidyverse basics
# For data cleaning, wrangling and plotting... the tidyverse is really a no-brainer
library(tidyverse)
tidyverse_packages()
?mpg
?mutate
w_dat <- read.csv("finaldata2.csv")
View(w_dat)
w_dat <- w_dat[, -1]
?select
w_dat %>% select(first_serves_in)
w_dat$first_serve_percentage <- w_dat$first_serves_in/w_dat$first_serves_total
w_dat$first_serve_percentage <- w_dat$first_serves_in/w_dat$first_serves_total*100 %>% round(3)
w_dat$first_serve_percentage <- (w_dat$first_serves_in/w_dat$first_serves_total)*100 %>% round(3)
(w_dat$first_serves_in/w_dat$first_serves_total)*100 %>% round(3)
library(tidyverse)
w_dat$first_serve_percentage <- (w_dat$first_serves_in/w_dat$first_serves_total)*100 %>% round(3)
View(w_dat)
library(dplyr)
library(tidyverse)
w_dat <- read.csv("finaldata2.csv")
w_dat <- w_dat[, -1]
w_dat$first_serve_percentage <- (w_dat$first_serves_in/w_dat$first_serves_total)*100 %>% round(3)
View(w_dat)
install.packages(magrittr)
library(dplyr)
library(tidyverse)
library(magrittr)
w_dat <- read.csv("finaldata2.csv")
w_dat <- w_dat[, -1]
w_dat$first_serve_percentage <- (w_dat$first_serves_in/w_dat$first_serves_total)*100 %>% round(3)
View(w_dat)
w_dat$first_serve_percentage %>% round(3)
w_dat$first_serve_percentage <- round((w_dat$first_serves_in/w_dat$first_serves_total)*100,3)
View(w_dat)
w_dat <- w_dat[, c(1:4, 6, 18)]
View(w_dat)
View(w_dat)
View(final_data)
w_dat <- read.csv("finaldata2.csv")
w_dat <- w_dat[, -1]
View(w_dat)
#Select serve and return ratings as our inital features
w_dat <- w_dat[, c(1:4, 6, 18, 36, 37, 39)]
View(w_dat)
average_past_games <- function(data, columns = c(5, 6), months = 24){
n <- nrow(data)
player <- unique(data$name)
return(player)
}
average_past_games(w_dat)
?filter
average_past_games(w_dat)
str(w_dat)
lubridate::as_date(w_dat$tournament_date)
w_dat$tournament_date <- lubridate::as_date(w_dat$tournament_date)
View(w_dat)
str(w_dat)
data <- w_dat
n <- nrow(data)
player <- unique(data$name)
for(i in player){
dat <- data %>% filter(name == i)
for(i in 1:nrow(dat)){
matches <- dat %>% filter()
}
}
View(dat)
View(data)
for(i in player){
dat <- data %>% filter(name == i)
for(j in 1:nrow(dat)){
matches <- dat %>% filter()
}
}
dat <- data %>% filter(name == i)
View(dat)
matches <- dat %>% filter(dat$tournament_date < dat$tournament_date[i], dat$tournament_date > dat$tournament_date[i] + months)
dat$tournament_date[i] - months
dat$tournament_date
matches <- dat %>% filter(dat$tournament_date < dat$tournament_date[j], dat$tournament_date > dat$tournament_date[j] - months)
dat$tournament_date < dat$tournament_date[j]
matches <- dat %>% filter(dat$tournament_date < dat$tournament_date[j] & dat$tournament_date > dat$tournament_date[j] - months)
matches <- dat %>% filter(dat$tournament_date < dat$tournament_date[j])
View(matches)
library(tidyverse)
library(tidyverse)
(dat$tournament_date[j] - dmonths(months)
dat$tournament_date[j] - dmonths(months)
dat$tournament_date[j]
ymd(dat$tournament_date[j] - months(months))
library(lubridate)
ymd(dat$tournament_date[j] - months(months))
dat$tournament_date[j
dat$tournament_date[j] - months(months)
dat$tournament_date[j]
dat$tournament_date[j] - months(months)
months = 24
dat$tournament_date[j] - months(months)
int <- interval(start = (dat$tournament_date[j] - months(months)), end = dat$tournament_date[j])
(dat$tournament_date[j] - months(months)
matches <- dat %>% filter(dat$tournament_date < dat$tournament_date[j] & dat$tournament_date > (dat$tournament_date[j] - months(months))
}
}
return(dat)
}
average_past_games(w_dat)
matches <- dat %>% filter(dat$tournament_date < dat$tournament_date[j] & dat$tournament_date > (dat$tournament_date[j] - months(months))
View(matches)
matches <- dat %>% filter(dat$tournament_date < dat$tournament_date[j] & dat$tournament_date > (dat$tournament_date[j] - months(months))
matches <- dat %>% filter(dat$tournament_date < dat$tournament_date[j] & dat$tournament_date > (dat$tournament_date[j] - months(months)))
(dat$tournament_date[j] - months(months))
matches <- dat %>% filter(dat$tournament_date < dat$tournament_date[j] & dat$tournament_date >= (dat$tournament_date[j] - months(months)))
View(matches)
matches <- dat %>% filter(dat$tournament_date < dat$tournament_date[j] & dat$tournament_date >= (dat$tournament_date[j] - months(months))) %>%
select(columns) %>% mean()
columns = c(5, 6)
matches <- dat %>% filter(dat$tournament_date < dat$tournament_date[j] & dat$tournament_date >= (dat$tournament_date[j] - months(months))) %>%
select(columns) %>% mean()
matches <- dat %>% filter(dat$tournament_date < dat$tournament_date[j] & dat$tournament_date >= (dat$tournament_date[j] - months(months)))
cols <- matches %>% select(columns)
averages <- cols %>% summarise(mean = mean(cols))
mean(cols)
cols <- matches %>% select(columns) %>% summarise_if(is.numeric, mean)
View(cols)
matches <- dat %>% filter(dat$tournament_date < dat$tournament_date[j] & dat$tournament_date >= (dat$tournament_date[j] - months(months))) %>% select(columns) %>% summarise_if(is.numeric, mean)
View(matches)
average_past_games <- function(data, columns = c(5, 6), months = 24){
n <- nrow(data)
player <- unique(data$name)
for(i in player){
dat <- data %>% filter(name == i)
for(j in 1:nrow(dat)){
matches <- dat %>%
filter(dat$tournament_date < dat$tournament_date[j] & dat$tournament_date >= (dat$tournament_date[j] - months(months))) %>%
select(columns) %>% summarise_if(is.numeric, mean)
data <- cbind(data, matches)
}
}
return(data)
}
average_past_games(w_dat)
View(matches)
cbind(dat[j], matches)
dat[j, ] <- cbind(dat[j, ], matches)
dat[j] <- cbind(dat[j, ], matches)
View(matches)
append(dat[j], matches)
append(dat[j,], matches)
ncol(data) + length(columns)
player <- matrix(0, nrow = nrow(dat), ncol = ncol(data) + length(columns))
cbind(dat[j,], matches)
average_past_games <- function(data, columns = c(5, 6), months = 24){
n <- nrow(data)
player <- unique(data$name)
return <- matrix(0, nrow = 1, ncol = ncol(data) + length(columns))
for(i in player){
dat <- data %>% filter(name == i)
player_dat <- matrix(0, nrow = nrow(dat), ncol = ncol(data) + length(columns))
for(j in 1:nrow(dat)){
matches <- dat %>%
filter(dat$tournament_date < dat$tournament_date[j] & dat$tournament_date >= (dat$tournament_date[j] - months(months))) %>%
select(columns) %>% summarise_if(is.numeric, mean)
player[j,] <- cbind(dat[j,], matches)
}
return <- rbind(return, player)
}
return(data)
}
test <- average_past_games(w_dat[1:5000])
test <- average_past_games(w_dat[1:5000], c(5,6))
test <- average_past_games(w_dat[1:5000,])
cbind(dat[j,], matches)
player[1, ] <- cbind(dat[j,], matches)
View(player)
player_dat <- matrix(0, nrow = nrow(dat), ncol = ncol(data) + length(columns))
player_dat[1, ] <- cbind(dat[j,], matches)
View(player_dat)
View(player_dat)
player_dat <- matrix(0, nrow = nrow(dat), ncol = ncol(data) + length(columns))
cbind(dat[j,], matches)
str(cbind(dat[j,], matches))
as.vector((cbind(dat[j,], matches)))
player_dat[1, ] <- as.vector((cbind(dat[j,], matches)))
as.vector((cbind(dat[j,], matches)))
player_dat <- matrix(0, nrow = nrow(dat), ncol = ncol(data) + length(columns))
player_dat[1] <- as.vector((cbind(dat[j,], matches)))
player_dat <- matrix(0, nrow = nrow(dat), ncol = ncol(data) + length(columns))
player_dat[1, ]
as.vector((cbind(dat[j,], matches)))
t <- as.vector((cbind(dat[j,], matches)))
t
dat[j,]
dat[j, -1]
length(as.vector((cbind(dat[j, ], matches))))
player_dat[1, ] <- as.vector((cbind(dat[j, ], matches)))
player_dat <- matrix(0, nrow = nrow(dat), ncol = ncol(data) + length(columns))
player_dat[[1, ]] <- as.vector((cbind(dat[j, ], matches)))
as.vector((cbind(dat[j, ], matches)))
player_dat <- matrix(0, nrow = nrow(dat), ncol = ncol(data) + length(columns))
rbind(player_dat, cbind(dat[j, ], matches)))
rbind(player_dat, cbind(dat[j, ], matches))
colnames(data)
colnames(data)[columns]
colnames(return) <- c(colnames(data), colnames(data)[columns])
View(return)
return_matrix <- matrix(0, nrow = 1, ncol = ncol(data) + length(columns))
colnames(return_matrix) <- c(colnames(data), colnames(data)[columns])
View(return_matrix)
colnames(player_dat) <- colnames(return_matrix)
rbind(player_dat, cbind(dat[j, ], matches))
player_dat <- matrix(0, nrow = 1, ncol = ncol(data) + length(columns))
colnames(player_dat) <- colnames(return_matrix)
cbind(dat[j, ], matches)
rbind(player_dat, cbind(dat[j, ], matches))
average_past_games <- function(data, columns = c(5, 6), months = 24){
n <- nrow(data)
player <- unique(data$name)
return_matrix <- matrix(0, nrow = 1, ncol = ncol(data) + length(columns))
colnames(return_matrix) <- c(colnames(data), colnames(data)[columns])
for(i in player){
dat <- data %>% filter(name == i)
player_dat <- matrix(0, nrow = 1, ncol = ncol(data) + length(columns))
colnames(player_dat) <- colnames(return_matrix)
for(j in 1:nrow(dat)){
matches <- dat %>%
filter(dat$tournament_date < dat$tournament_date[j] & dat$tournament_date >= (dat$tournament_date[j] - months(months))) %>%
select(columns) %>% summarise_if(is.numeric, mean)
player_dat <- rbind(player_dat, cbind(dat[j, ], matches))
}
return <- rbind(return, player_dat[,-1])
}
return(return_matrix[,-1])
}
test <- average_past_games(w_dat[1:5000,])
test <- average_past_games(w_dat[1:5000,])
debugSource('~/GitHub/Statistics-Honours-Project/YTD_Script_Adam.R', echo=TRUE)
View(matches)
View(player_dat)
View(player_dat)
average_past_games <- function(data, columns = c(5, 6), months = 24){
n <- nrow(data)
player <- unique(data$name)
return_matrix <- matrix(0, nrow = 1, ncol = ncol(data) + length(columns))
colnames(return_matrix) <- c(colnames(data), colnames(data)[columns])
for(i in player){
dat <- data %>% filter(name == i)
player_dat <- matrix(0, nrow = 1, ncol = ncol(data) + length(columns))
colnames(player_dat) <- colnames(return_matrix)
for(j in 1:nrow(dat)){
matches <- dat %>%
filter(dat$tournament_date < dat$tournament_date[j] & dat$tournament_date >= (dat$tournament_date[j] - months(months))) %>%
select(columns) %>% summarise_if(is.numeric, mean)
player_dat <- rbind(player_dat, cbind(dat[j, ], matches))
}
return_matrix <- rbind(return_matrix, player_dat[-1, ])
}
return(return_matrix[-1, ])
}
source('~/GitHub/Statistics-Honours-Project/YTD_Script_Adam.R', echo=TRUE)
test <- average_past_games(w_dat[1:5000,])
View(test)
test <- average_past_games(w_dat[1:5000,])
test <- average_past_games(w_dat[1:1000,])
average_past_games <- function(data, columns = c(5, 6), months = 24){
n <- nrow(data)
player <- unique(data$name)
return_matrix <- matrix(0, nrow = 1, ncol = ncol(data) + length(columns))
colnames(return_matrix) <- c(colnames(data), colnames(data)[columns])
for(i in player){
dat <- data %>% filter(name == i)
player_dat <- matrix(0, nrow = 1, ncol = ncol(data) + length(columns))
colnames(player_dat) <- colnames(return_matrix)
for(j in 1:nrow(dat)){
matches <- dat %>%
filter(dat$tournament_date =< dat$tournament_date[j] & dat$tournament_date >= (dat$tournament_date[j] - months(months))) %>%
select(columns) %>% summarise_if(is.numeric, mean)
player_dat <- rbind(player_dat, cbind(dat[j, ], matches))
}
return_matrix <- rbind(return_matrix, player_dat[-1, ])
}
return(return_matrix[-1, ])
}
average_past_games <- function(data, columns = c(5, 6), months = 24){
n <- nrow(data)
player <- unique(data$name)
return_matrix <- matrix(0, nrow = 1, ncol = ncol(data) + length(columns))
colnames(return_matrix) <- c(colnames(data), colnames(data)[columns])
for(i in player){
dat <- data %>% filter(name == i)
player_dat <- matrix(0, nrow = 1, ncol = ncol(data) + length(columns))
colnames(player_dat) <- colnames(return_matrix)
for(j in 1:nrow(dat)){
matches <- dat %>%
filter(dat$tournament_date <= dat$tournament_date[j] & dat$tournament_date >= (dat$tournament_date[j] - months(months))) %>%
select(columns) %>% summarise_if(is.numeric, mean)
player_dat <- rbind(player_dat, cbind(dat[j, ], matches))
}
return_matrix <- rbind(return_matrix, player_dat[-1, ])
}
return(return_matrix[-1, ])
}
test <- average_past_games(w_dat[1:1000,])
View(test)
debugSource('~/GitHub/Statistics-Honours-Project/YTD_Script_Adam.R', echo=TRUE)
View(dat)
View(matches)
View(dat)
debugSource('~/GitHub/Statistics-Honours-Project/YTD_Script_Adam.R', echo=TRUE)
View(matches)
debugSource('~/GitHub/Statistics-Honours-Project/YTD_Script_Adam.R', echo=TRUE)
View(player_dat)
source('~/GitHub/Statistics-Honours-Project/YTD_Script_Adam.R', echo=TRUE)
debugSource('~/GitHub/Statistics-Honours-Project/YTD_Script_Adam.R', echo=TRUE)
debugSource('~/GitHub/Statistics-Honours-Project/YTD_Script_Adam.R', echo=TRUE)
debugSource('~/GitHub/Statistics-Honours-Project/YTD_Script_Adam.R', echo=TRUE)
View(average)
debugSource('~/GitHub/Statistics-Honours-Project/YTD_Script_Adam.R', echo=TRUE)
debugSource('~/GitHub/Statistics-Honours-Project/YTD_Script_Adam.R', echo=TRUE)
View(average)
colnames(data)[columns]
debugSource('~/GitHub/Statistics-Honours-Project/YTD_Script_Adam.R', echo=TRUE)
View(average)
View(matches)
View(player_dat)
library(dplyr)
library(tidyverse)
library(lubridate)
library(magrittr)
w_dat <- read.csv("finaldata2.csv")
w_dat <- w_dat[, -1]
w_dat$tournament_date <- lubridate::as_date(w_dat$tournament_date)
#w_dat$first_serve_percentage <- round((w_dat$first_serves_in/w_dat$first_serves_total)*100,3)
# We need to convert our data to percentages
#Select serve and return ratings as our inital features
w_dat <- w_dat[, c(1:4, 6, 18, 36, 37, 39)]
data <- w_dat
months = 24
#w_dat <- w_dat[, c(1:4, )]
average_past_games <- function(data, columns = c(5, 6), months = 24){
n <- nrow(data)
player <- unique(data$name)
return_matrix <- matrix(0, nrow = 1, ncol = ncol(data) + length(columns))
colnames(return_matrix) <- c(colnames(data), colnames(data)[columns])
for(i in player){
dat <- data %>% filter(name == i)
player_dat <- matrix(0, nrow = 1, ncol = ncol(data) + length(columns))
colnames(player_dat) <- colnames(return_matrix)
for(j in 1:nrow(dat)){
matches <- dat %>% filter(dat$tournament_date <= dat$tournament_date[j] & dat$tournament_date >= (dat$tournament_date[j] - months(months)))
if(j == 1){ #The first game has no ytd from before
average <- as.data.frame(t(c(0,0)))
colnames(average) <- colnames(data)[columns]
}
else{
matches <- matches[1:(j-1), ]
average <- matches %>% select(columns) %>% summarise_if(is.numeric, mean)
}
player_dat <- rbind(player_dat, cbind(dat[j, ], average))
}
return_matrix <- rbind(return_matrix, player_dat[-1, ])
}
return(return_matrix[-1, ])
}
test <- average_past_games(w_dat[1:1000,])
View(test)
test <- average_past_games(w_dat[1:1000,])
View(test)
View(data)
debugSource('~/GitHub/Statistics-Honours-Project/YTD_Script_Adam.R', echo=TRUE)
View(player_dat)
View(matches)
View(matches)
View(player_dat)
View(player_dat)
debugSource('~/GitHub/Statistics-Honours-Project/YTD_Script_Adam.R', echo=TRUE)
View(matches)
debugSource('~/GitHub/Statistics-Honours-Project/YTD_Script_Adam.R', echo=TRUE)
View(average)
View(average)
View(matches)
View(matches)
View(matches)
source('~/GitHub/Statistics-Honours-Project/YTD_Script_Adam.R', echo=TRUE)
View(test)
w_dat$tournament_date <- lubridate::as_date(w_dat$tournament_date)
View(w_dat)
average_past_games <- function(data, columns = c(5, 6), months = 24){
n <- nrow(data)
player <- unique(data$name)
return_matrix <- matrix(0, nrow = 1, ncol = ncol(data) + length(columns))
colnames(return_matrix) <- c(colnames(data), colnames(data)[columns])
for(i in player){
dat <- data %>% filter(name == i)
player_dat <- matrix(0, nrow = 1, ncol = ncol(data) + length(columns))
colnames(player_dat) <- colnames(return_matrix)
for(j in 1:nrow(dat)){
matches <- dat %>% filter(dat$tournament_date <= dat$tournament_date[j])
if(j == 1){ #The first game has no ytd from before
average <- as.data.frame(t(c(0,0)))
colnames(average) <- colnames(data)[columns]
}
else{
matches <- matches[1:(j-1), ]
average <- matches %>% select(columns) %>% summarise_if(is.numeric, mean)
}
player_dat <- rbind(player_dat, cbind(dat[j, ], average))
}
return_matrix <- rbind(return_matrix, player_dat[-1, ])
}
return(return_matrix[-1, ])
}
test <- average_past_games(w_dat[1:1000,])
View(test)
debugSource('~/GitHub/Statistics-Honours-Project/YTD_Script_Adam.R', echo=TRUE)
dat$tournament_date >= (dat$tournament_date[j] - months(months))
debugSource('~/GitHub/Statistics-Honours-Project/YTD_Script_Adam.R', echo=TRUE)
dat$tournament_date >= (dat$tournament_date[j] - months(months))
View(matches)
debugSource('~/GitHub/Statistics-Honours-Project/YTD_Script_Adam.R', echo=TRUE)
View(average)
View(matches)
source('~/GitHub/Statistics-Honours-Project/YTD_Script_Adam.R', echo=TRUE)
View(test)
View(data)
average_past_games <- function(data, columns = c(5, 6), months = 24){
n <- nrow(data)
player <- unique(data$name)
return_matrix <- matrix(0, nrow = 1, ncol = ncol(data) + length(columns))
colnames(return_matrix) <- c(colnames(data), colnames(data)[columns])
for(i in player){
dat <- data %>% filter(name == i)
player_dat <- matrix(0, nrow = 1, ncol = ncol(data) + length(columns))
colnames(player_dat) <- colnames(return_matrix)
for(j in 1:nrow(dat)){
matches <- dat %>% filter(dat$tournament_date <= dat$tournament_date[j] & dat$tournament_date >= (dat$tournament_date[j] - months(months)))
if(j == 1){ #The first game has no ytd from before
average <- as.data.frame(t(c(0,0)))
colnames(average) <- colnames(data)[columns]
}
else{
ind <- which(matches$Match_ID == dat$Match_ID[j])
matches <- matches[1:(ind-1), ]
average <- matches %>% select(columns) %>% summarise_if(is.numeric, mean)
}
player_dat <- rbind(player_dat, cbind(dat[j, ], average))
}
return_matrix <- rbind(return_matrix, player_dat[-1, ])
}
return(return_matrix[-1, ])
}
test <- average_past_games(w_dat[1:1000,])
View(test)
debugSource('~/GitHub/Statistics-Honours-Project/YTD_Script_Adam.R', echo=TRUE)
debugSource('~/GitHub/Statistics-Honours-Project/YTD_Script_Adam.R', echo=TRUE)
View(matches)
source('~/GitHub/Statistics-Honours-Project/YTD_Script_Adam.R', echo=TRUE)
View(test)
average_past_games <- function(data, columns = c(5, 6), months = 24){
n <- nrow(data)
player <- unique(data$name)
return_matrix <- matrix(0, nrow = 1, ncol = ncol(data) + length(columns))
colnames(return_matrix) <- c(colnames(data), colnames(data)[columns])
for(i in player){
dat <- data %>% filter(name == i)
player_dat <- matrix(0, nrow = 1, ncol = ncol(data) + length(columns))
colnames(player_dat) <- colnames(return_matrix)
for(j in 1:nrow(dat)){ # This include all matches in a tournament, even if we are in the quarters. Thus, we need to remove the semis etc
matches <- dat %>% filter(dat$tournament_date <= dat$tournament_date[j] & dat$tournament_date >= (dat$tournament_date[j] - months(months)))
if(j == 1){ #The first game has no ytd from before
average <- as.data.frame(t(c(0,0)))
colnames(average) <- colnames(data)[columns]
}
else{
ind <- which(matches$Match_ID == dat$Match_ID[j])  #Find which j we are in matches, and throw older stuff away
matches <- matches[1:(ind-1), ]
average <- matches %>% select(columns) %>% summarise_if(is.numeric, mean)
}
player_dat <- rbind(player_dat, cbind(dat[j, ], average))
}
return_matrix <- rbind(return_matrix, player_dat[-1, ])
}
return(return_matrix[-1, ])
}
test <- average_past_games(w_dat[1:1000,])
View(test)
rolling_average_serve_return <- average_past_games(w_dat)
write.csv(rolling_average_serve_return, file = "C:/Users/Adam Bresler/Documents/GitHub/Statistics-Honours-Project/Data/rolling_average_serve_return.csv")
View(rolling_average_serve_return)
