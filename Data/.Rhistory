setwd("~/GitHub/Statistics-Honours-Project/Data")
ata <- read.csv("rolling_average_all.csv")
data <- data[,-1]
#Eventually, add this into loop
#colnames(data)[c(10,11)] <- c("average_serve_rating", "average_return_rating")
predictive <- data %>%
group_by(Match_ID)%>%arrange(.by_group = TRUE)
predictive2 <- data %>%
group_by(Match_ID)%>%arrange(.by_group = TRUE)%>%
select(c(1,57:98))
predictive3 <- predictive[seq(1,52522,2),-c(57:98)]
first_player<-predictive2[seq(1,52522,2),-1]
second_player<-predictive2[seq(2,52522,2),-1]
difference <- first_player-second_player
predictive_dataset <- cbind(predictive3,difference)
rm(predictive, predictive2, predictive3, second_player, first_player, difference)
colnames(predictive_dataset)[c(2,3)] <- c("Player_A", "Player_B")
predictive_dataset$wl <- ifelse(predictive_dataset$wl == 'winner', "Player A", "Player B")
predictive_dataset$wl <- as.factor(predictive_dataset$wl)
# Adding the seeding ---------------------------------------------------------
predictive <- data %>%
group_by(Match_ID)%>%arrange(.by_group = TRUE)
first_player<-predictive[seq(1,52522,2),-1]
player_1_seed <-first_player$seed
second_player<-predictive[seq(2,52522,2),-1]
player_2_seed <-second_player$seed
rm(predictive)
predictive_dataset$player_A_seed <- player_1_seed
predictive_dataset$player_B_seed <- player_2_seed
predictive_dataset <- predictive_dataset[,c(1:4,99:100,6:98)]
rm(first_player,second_player)
library(dplyr)
library(tidyverse)
library(lubridate)
library(magrittr)
library(caret)
library(stringr)
# Creating the predictive ----------------------------------------------------
data <- read.csv("rolling_average_all.csv")
data <- data[,-1]
#Eventually, add this into loop
#colnames(data)[c(10,11)] <- c("average_serve_rating", "average_return_rating")
predictive <- data %>%
group_by(Match_ID)%>%arrange(.by_group = TRUE)
predictive2 <- data %>%
group_by(Match_ID)%>%arrange(.by_group = TRUE)%>%
select(c(1,57:98))
predictive3 <- predictive[seq(1,52522,2),-c(57:98)]
first_player<-predictive2[seq(1,52522,2),-1]
second_player<-predictive2[seq(2,52522,2),-1]
difference <- first_player-second_player
predictive_dataset <- cbind(predictive3,difference)
rm(predictive, predictive2, predictive3, second_player, first_player, difference)
colnames(predictive_dataset)[c(2,3)] <- c("Player_A", "Player_B")
predictive_dataset$wl <- ifelse(predictive_dataset$wl == 'winner', "Player A", "Player B")
predictive_dataset$wl <- as.factor(predictive_dataset$wl)
# Adding the seeding ---------------------------------------------------------
predictive <- data %>%
group_by(Match_ID)%>%arrange(.by_group = TRUE)
first_player<-predictive[seq(1,52522,2),-1]
player_1_seed <-first_player$seed
second_player<-predictive[seq(2,52522,2),-1]
player_2_seed <-second_player$seed
rm(predictive)
predictive_dataset$player_A_seed <- player_1_seed
predictive_dataset$player_B_seed <- player_2_seed
predictive_dataset <- predictive_dataset[,c(1:4,99:100,6:98)]
rm(first_player,second_player)
#write.csv(predictive_dataset, file = "C:/Users/Adam Bresler/Documents/GitHub/Statistics-Honours-Project/Data/all_differences_no_custom_features.csv")
# Begin with feature design --------------------------------------------------
View(data)
View(predictive_dataset)
predictive_dataset2 <- predictive_dataset
View(predictive_dataset2)
View(predictive_dataset2)
library(gbm)
ctrl <- trainControl(method = 'cv', number = 5, verboseIter = T)
gbm_grid <- expand.grid(n.trees = c(250, 500, 1000),
interaction.depth = c(1, 2),
shrinkage = c(0.1, 0.05, 0.01),
n.minobsinnode = 1)
set.seed(2020)
View(predictive_dataset2)
predictive_dataset2$wl <- as.factor(predictive_dataset2$wl)
ind <- 1:23658
train_data <- predictive_dataset2[ind, ]
test_data <- predictive_dataset2[-ind, ]
library(gbm)
ctrl <- trainControl(method = 'cv', number = 5, verboseIter = T)
gbm_grid <- expand.grid(n.trees = c(250, 500, 1000),
interaction.depth = c(1, 2),
shrinkage = c(0.1, 0.05, 0.01),
n.minobsinnode = 1)
set.seed(2020)
gbm_tennis <- train(as.formula(paste(colnames(predictive_dataset2)[4], "~",
paste(colnames(data)[91:98], collapse = "+"),
sep = "")), data = train_data,
method = 'gbm',
distribution = 'bernoulli',
trControl = ctrl,
verbose = F,
tuneGrid = gbm_grid)
gbm_pred <- predict(gbm_tennis, test_data)
gbm_cf <- confusionMatrix(gbm_pred, test_data$wl)
sum(diag(gbm_cf$table))/sum(gbm_cf$table)
data <- read.csv("rolling_average_all.csv")
data <- data[,-1]
#Eventually, add this into loop
#colnames(data)[c(10,11)] <- c("average_serve_rating", "average_return_rating")
predictive <- data %>%
group_by(Match_ID)%>%arrange(.by_group = TRUE)
predictive2 <- data %>%
group_by(Match_ID)%>%arrange(.by_group = TRUE)%>%
select(c(1,57:98))
predictive3 <- predictive[seq(1,52522,2),-c(57:98)]
first_player<-predictive2[seq(1,52522,2),-1]
second_player<-predictive2[seq(2,52522,2),-1]
difference <- first_player-second_player
predictive_dataset <- cbind(predictive3,difference)
rm(predictive, predictive2, predictive3, second_player, first_player, difference)
colnames(predictive_dataset)[c(2,3)] <- c("Player_A", "Player_B")
predictive_dataset$wl <- ifelse(predictive_dataset$wl == 'winner', "Player A", "Player B")
predictive_dataset$wl <- as.factor(predictive_dataset$wl)
# Adding the seeding ---------------------------------------------------------
predictive <- data %>%
group_by(Match_ID)%>%arrange(.by_group = TRUE)
first_player<-predictive[seq(1,52522,2),-1]
player_1_seed <-first_player$seed
second_player<-predictive[seq(2,52522,2),-1]
player_2_seed <-second_player$seed
rm(predictive)
predictive_dataset$player_A_seed <- player_1_seed
predictive_dataset$player_B_seed <- player_2_seed
predictive_dataset <- predictive_dataset[,c(1:4,99:100,6:98)]
rm(first_player,second_player)
predictive_dataset2 <- predictive_dataset
predictive_dataset2$wl <- as.factor(predictive_dataset2$wl)
ind <- 1:23658
train_data <- predictive_dataset2[ind, ]
test_data <- predictive_dataset2[-ind, ]
View(predictive_dataset2)
set.seed(2020)
mod <- glm(as.formula(paste(colnames(data)[4], "~",
paste(colnames(data)[c(91:92,94:95)], collapse = "+"),
sep = "")), data = train_data, family = binomial)
threshold <- 0.3
y.hat <- ifelse(predict(mod, newdata = test_data, type = 'response') > threshold, "Player A", "Player B")
y.hat[which(is.na(y.hat))]
conf_matrix <- table(y.hat, test_data$wl)
conf_matrix
sum(diag(conf_matrix))/sum(conf_matrix)
threshold <- 0.5
y.hat <- ifelse(predict(mod, newdata = test_data, type = 'response') > threshold, "Player A", "Player B")
y.hat[which(is.na(y.hat))]
conf_matrix <- table(y.hat, test_data$wl)
conf_matrix
sum(diag(conf_matrix))/sum(conf_matrix)
threshold <- 0.45
y.hat <- ifelse(predict(mod, newdata = test_data, type = 'response') > threshold, "Player A", "Player B")
y.hat[which(is.na(y.hat))]
conf_matrix <- table(y.hat, test_data$wl)
conf_matrix
sum(diag(conf_matrix))/sum(conf_matrix)
plot(sort(predict(mod, type = 'response')), type = "l")
threshold <- 0.4
y.hat <- ifelse(predict(mod, newdata = test_data, type = 'response') > threshold, "Player A", "Player B")
y.hat[which(is.na(y.hat))]
conf_matrix <- table(y.hat, test_data$wl)
conf_matrix
sum(diag(conf_matrix))/sum(conf_matrix)
# Decision Tree --------------------------------------------------------------
library(tree)
#Super basic, default everything
set.seed(2020)
tree_tennis<- tree(as.formula(paste(colnames(data)[4], "~",
paste(colnames(data)[91:92,94:95)], collapse = "+"),
sep = "")), data = train_data, split = 'deviance')
yhat<- predict(tree_tennis,  test_data, type = 'class')
tree_tennis<- tree(as.formula(paste(colnames(data)[4], "~",
paste(colnames(data)[c(91:92,94:95)], collapse = "+"),
sep = "")), data = train_data, split = 'deviance')
yhat<- predict(tree_tennis,  test_data, type = 'class')
(c_mat <- table(yhat, test_data$wl))
sum(diag(c_mat))/nrow(test_data)*100
1 - sum(diag(c_mat))/nrow(test_data)
nrow(test_data)
#
rm(mod)
#
rm(tree_tennis)
str(predictive_dataset2$player_A_seed)
predictive_dataset2$seed <- predictive_dataset2$player_A_seed-predictive_dataset2$seed <- predictive_dataset2$player_B_seed
predictive_dataset2$seed <- predictive_dataset2$player_A_seed-predictive_dataset2$player_B_seed
View(predictive_dataset2)
#
rm(train_data,test_data)
#
rm(ind)
View(predictive_dataset2)
predictive_dataset2$wl <- as.factor(predictive_dataset2$wl)
predictive_dataset2$seed <- predictive_dataset2$player_A_seed-predictive_dataset2$player_B_seed
ind <- 1:23658
train_data <- predictive_dataset2[ind, ]
test_data <- predictive_dataset2[-ind, ]
#Super basic, default everything
set.seed(2020)
tree_tennis<- tree(as.formula(paste(colnames(data)[4], "~",
paste(colnames(data)[c(14,91:92,94:95,100)], collapse = "+"),
sep = "")), data = train_data, split = 'deviance')
predictive_dataset2 <- predictive_dataset
predictive_dataset2$wl <- as.factor(predictive_dataset2$wl)
predictive_dataset2$seed <- predictive_dataset2$player_A_seed-predictive_dataset2$player_B_seed
ind <- 1:23658
train_data <- predictive_dataset2[ind, ]
test_data <- predictive_dataset2[-ind, ]
# Decision Tree --------------------------------------------------------------
library(tree)
#Super basic, default everything
set.seed(2020)
tree_tennis<- tree(as.formula(paste(colnames(data)[4], "~",
paste(colnames(data)[c(14,91:92,94:95,100)], collapse = "+"),
sep = "")), data = train_data, split = 'deviance')
tree_tennis<- tree(as.formula(paste(colnames(data)[4], "~",
paste(colnames(data)[c(91:92,94:95,100)], collapse = "+"),
sep = "")), data = train_data, split = 'deviance')
tree_tennis<- tree(as.formula(paste(colnames(data)[4], "~",
paste(colnames(data)[c(91:92,94:95)], collapse = "+"),
sep = "")), data = train_data, split = 'deviance')
tree_tennis<- tree(as.formula(paste(colnames(data)[4], "~",
paste(colnames(data)[c(91:92,94:95,100)], collapse = "+"),
sep = "")), data = train_data, split = 'deviance')
View(tree_tennis)
yhat<- predict(tree_tennis,  test_data, type = 'class')
(c_mat <- table(yhat, test_data$wl))
sum(diag(c_mat))/nrow(test_data)*100
1 - sum(diag(c_mat))/nrow(test_data)
#Super basic, default everything
set.seed(2020)
tree_tennis<- tree(as.formula(paste(colnames(data)[4], "~",
paste(colnames(data)[c(14,100)], collapse = "+"),
sep = "")), data = train_data, split = 'deviance')
tree_tennis<- tree(as.formula(paste(colnames(data)[4], "~",
paste(colnames(data)[c(100)], collapse = "+"),
sep = "")), data = train_data, split = 'deviance')
tree_tennis<- tree(as.formula(paste(colnames(data)[4], "~",
paste(colnames(data)[100], collapse = "+"),
sep = "")), data = train_data, split = 'deviance')
tree_tennis<- tree(as.formula(paste(colnames(data)[4], "~",
paste(colnames(data)[c(91:92,94:95)], collapse = "+"),
sep = "")), data = train_data, split = 'deviance')
yhat<- predict(tree_tennis,  test_data, type = 'class')
(c_mat <- table(yhat, test_data$wl))
sum(diag(c_mat))/nrow(test_data)*100
1 - sum(diag(c_mat))/nrow(test_data)
tree_tennis<- tree(wl~seed, data = train_data, split = 'deviance')
yhat<- predict(tree_tennis,  test_data, type = 'class')
(c_mat <- table(yhat, test_data$wl))
sum(diag(c_mat))/nrow(test_data)*100
1 - sum(diag(c_mat))/nrow(test_data)
View(predictive_dataset2)
View(predictive_dataset2)
tree_tennis<- tree(wl~seed+player_A_hand, data = train_data, split = 'deviance')
yhat<- predict(tree_tennis,  test_data, type = 'class')
set.seed(2020)
tree_tennis<- tree(wl~seed+player_A_hand+player_B_hand, data = train_data, split = 'deviance')
tree_tennis<- tree(wl~seed+surface, data = train_data, split = 'deviance')
View(predictive_dataset2)
set.seed(2020)
tree_tennis<- tree(wl~seed+tournament_surface, data = train_data, split = 'deviance')
yhat<- predict(tree_tennis,  test_data, type = 'class')
(c_mat <- table(yhat, test_data$wl))
sum(diag(c_mat))/nrow(test_data)*100
1 - sum(diag(c_mat))/nrow(test_data)
set.seed(2020)
tree_tennis<- tree(wl~seed+percent_first_serve_won.1, data = train_data, split = 'deviance')
yhat<- predict(tree_tennis,  test_data, type = 'class')
(c_mat <- table(yhat, test_data$wl))
sum(diag(c_mat))/nrow(test_data)*100
predictive_dataset2$percent_first_return_won.1
predictive_dataset2$percent_first_serve_return_won.1
set.seed(2020)
tree_tennis<- tree(wl~seed+percent_first_serve_won.1+percent_first_serve_return_won.1, data = train_data, split = 'deviance')
yhat<- predict(tree_tennis,  test_data, type = 'class')
(c_mat <- table(yhat, test_data$wl))
sum(diag(c_mat))/nrow(test_data)*100
1 - sum(diag(c_mat))/nrow(test_data)
set.seed(2020)
tree_tennis<- tree(wl~percent_first_serve_won.1+percent_first_serve_return_won.1, data = train_data, split = 'deviance')
yhat<- predict(tree_tennis,  test_data, type = 'class')
(c_mat <- table(yhat, test_data$wl))
sum(diag(c_mat))/nrow(test_data)*100
1 - sum(diag(c_mat))/nrow(test_data)
set.seed(2020)
tree_tennis<- tree(wl~seed, data = train_data, split = 'deviance')
yhat<- predict(tree_tennis,  test_data, type = 'class')
(c_mat <- table(yhat, test_data$wl))
sum(diag(c_mat))/nrow(test_data)*100
set.seed(2020)
tree_tennis<- tree(wl~seed+tournament_conditions, data = train_data, split = 'deviance')
set.seed(2020)
tree_tennis<- tree(wl~seed+as.factor(player_A_hand), data = train_data, split = 'deviance')
yhat<- predict(tree_tennis,  test_data, type = 'class')
(c_mat <- table(yhat, test_data$wl))
sum(diag(c_mat))/nrow(test_data)*100
1 - sum(diag(c_mat))/nrow(test_data)
set.seed(2020)
tree_tennis<- tree(wl~seed+as.factor(tournament_surface), data = train_data, split = 'deviance')
yhat<- predict(tree_tennis,  test_data, type = 'class')
(c_mat <- table(yhat, test_data$wl))
sum(diag(c_mat))/nrow(test_data)*100
1 - sum(diag(c_mat))/nrow(test_data)
set.seed(2020)
tree_tennis<- tree(wl~seed+as.factor(percent_total_points_won.1), data = train_data, split = 'deviance')
set.seed(2020)
tree_tennis<- tree(wl~seed+percent_total_points_won.1, data = train_data, split = 'deviance')
yhat<- predict(tree_tennis,  test_data, type = 'class')
(c_mat <- table(yhat, test_data$wl))
sum(diag(c_mat))/nrow(test_data)*100
set.seed(2020)
tree_tennis<- tree(wl~seed+percent_total_points_won.1+as.factor(tournament_surface), data = train_data, split = 'deviance')
yhat<- predict(tree_tennis,  test_data, type = 'class')
(c_mat <- table(yhat, test_data$wl))
sum(diag(c_mat))/nrow(test_data)*100
set.seed(2020)
tree_tennis<- tree(wl~seed+percent_total_points_won.1+aces_percentage.1, data = train_data, split = 'deviance')
yhat<- predict(tree_tennis,  test_data, type = 'class')
(c_mat <- table(yhat, test_data$wl))
sum(diag(c_mat))/nrow(test_data)*100
set.seed(2020)
tree_tennis<- tree(wl~seed+percent_total_points_won.1+double_faults.1
, data = train_data, split = 'deviance')
yhat<- predict(tree_tennis,  test_data, type = 'class')
(c_mat <- table(yhat, test_data$wl))
sum(diag(c_mat))/nrow(test_data)*100
set.seed(2020)
tree_tennis<- tree(wl~seed+percent_total_points_won.1+aces.1
, data = train_data, split = 'deviance')
yhat<- predict(tree_tennis,  test_data, type = 'class')
(c_mat <- table(yhat, test_data$wl))
sum(diag(c_mat))/nrow(test_data)*100
1 - sum(diag(c_mat))/nrow(test_data)
set.seed(2020)
tree_tennis<- tree(wl~seed+percent_total_points_won.1+aces.1, data = train_data, split = 'deviance')
yhat<- predict(tree_tennis,  test_data, type = 'class')
(c_mat <- table(yhat, test_data$wl))
sum(diag(c_mat))/nrow(test_data)*100
library(dplyr)
library(tidyverse)
library(lubridate)
library(magrittr)
library(caret)
library(stringr)
# Creating the predictive ----------------------------------------------------
data <- read.csv("rolling_average_all.csv")
data <- data[,-1]
#Eventually, add this into loop
#colnames(data)[c(10,11)] <- c("average_serve_rating", "average_return_rating")
predictive <- data %>%
group_by(Match_ID)%>%arrange(.by_group = TRUE)
predictive2 <- data %>%
group_by(Match_ID)%>%arrange(.by_group = TRUE)%>%
select(c(1,57:98))
predictive3 <- predictive[seq(1,52522,2),-c(57:98)]
first_player<-predictive2[seq(1,52522,2),-1]
second_player<-predictive2[seq(2,52522,2),-1]
difference <- first_player-second_player
predictive_dataset <- cbind(predictive3,difference)
rm(predictive, predictive2, predictive3, second_player, first_player, difference)
colnames(predictive_dataset)[c(2,3)] <- c("Player_A", "Player_B")
predictive_dataset$wl <- ifelse(predictive_dataset$wl == 'winner', "Player A", "Player B")
predictive_dataset$wl <- as.factor(predictive_dataset$wl)
# Adding the seeding ---------------------------------------------------------
predictive <- data %>%
group_by(Match_ID)%>%arrange(.by_group = TRUE)
first_player<-predictive[seq(1,52522,2),-1]
player_1_seed <-first_player$seed
second_player<-predictive[seq(2,52522,2),-1]
player_2_seed <-second_player$seed
rm(predictive)
predictive_dataset$player_A_seed <- player_1_seed
predictive_dataset$player_B_seed <- player_2_seed
predictive_dataset <- predictive_dataset[,c(1:4,99:100,6:98)]
rm(first_player,second_player)
predictive_dataset2 <- predictive_dataset
predictive_dataset2$wl <- as.factor(predictive_dataset2$wl)
predictive_dataset2$seed <- predictive_dataset2$player_A_seed-predictive_dataset2$player_B_seed
ind <- 1:23658
train_data <- predictive_dataset2[ind, ]
test_data <- predictive_dataset2[-ind, ]
# Decision Tree --------------------------------------------------------------
library(tree)
predictive_dataset2$double_faults.1
set.seed(2020)
tree_tennis<- tree(wl~seed+percent_total_points_won.1+aces.1, data = train_data, split = 'deviance')
yhat<- predict(tree_tennis,  test_data, type = 'class')
(c_mat <- table(yhat, test_data$wl))
sum(diag(c_mat))/nrow(test_data)*100
1 - sum(diag(c_mat))/nrow(test_data)
tree_tennis<- tree(wl~seed+percent_total_points_won.1+aces.1, data = train_data, split = 'deviance')
yhat<- predict(tree_tennis,  test_data, type = 'class')
(c_mat <- table(yhat, test_data$wl))
sum(diag(c_mat))/nrow(test_data)*100
1 - sum(diag(c_mat))/nrow(test_data)
tree_tennis<- tree(wl~seed+percent_total_points_won.1+double_faults.1, data = train_data, split = 'deviance')
yhat<- predict(tree_tennis,  test_data, type = 'class')
(c_mat <- table(yhat, test_data$wl))
sum(diag(c_mat))/nrow(test_data)*100
1 - sum(diag(c_mat))/nrow(test_data)
tree_tennis<- tree(wl~seed+percent_total_points_won.1, split = 'deviance')
tree_tennis<- tree(wl~seed+percent_total_points_won.1, data = train_data, split = 'deviance')
yhat<- predict(tree_tennis,  test_data, type = 'class')
(c_mat <- table(yhat, test_data$wl))
sum(diag(c_mat))/nrow(test_data)*100
1 - sum(diag(c_mat))/nrow(test_data)
tree_tennis<- tree(wl~seed, data = train_data, split = 'deviance')
yhat<- predict(tree_tennis,  test_data, type = 'class')
(c_mat <- table(yhat, test_data$wl))
sum(diag(c_mat))/nrow(test_data)*100
tree_tennis<- tree(wl~as.factor(player_A_hand), data = train_data, split = 'deviance')
yhat<- predict(tree_tennis,  test_data, type = 'class')
(c_mat <- table(yhat, test_data$wl))
sum(diag(c_mat))/nrow(test_data)*100
tree_tennis<- tree(wl~seed, data = train_data, split = 'deviance')
yhat<- predict(tree_tennis,  test_data, type = 'class')
(c_mat <- table(yhat, test_data$wl))
sum(diag(c_mat))/nrow(test_data)*100
1 - sum(diag(c_mat))/nrow(test_data)
