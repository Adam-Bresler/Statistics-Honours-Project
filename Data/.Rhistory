n <- 1e7
x1 <- 1:n
x2 <- 1:n
y <- vector()
system.time( for(i in 1:n){ y[i] <- x1[i] + x2[i] } )
y <- vector()
system.time( y <- x1 + x2 )
x <- data.frame(matrix(runif(1e4*100), ncol = 100))
means <- colMeans(x)
tracemem(x)
for(i in 1:100) {
x[,i] <- x[,i] - means[i]
}
y <- as.list(x)
#Look at the structure of y
str(y) #This is a list of 100 lists
str(y[1]) #This is the first of those 100 lists, containing 1 numeric vector of size 10000
str(y[[1]]) #This accesses the vector (in other words the first column)
tracemem(y)
for(i in 1:100) {
y[[i]] <- y[[i]] - means[i]
}
set.seed(1)
sample(LETTERS, 5)
setwd("~/GitHub/Statistics-Honours-Project/Data")
library(dplyr)
library(tidyverse)
library(lubridate)
library(magrittr)
library(caret)
library(stringr)
w_dat <- read.csv("finaldata2.csv")
w_dat <- w_dat[, -1]
w_dat$tournament_date <- lubridate::as_date(w_dat$tournament_date)
#w_dat$first_serve_percentage <- round((w_dat$first_serves_in/w_dat$first_serves_total)*100,3)
# We need to convert our data to percentages
# Percentages ----------------------------------------------------------------
# serve percentages
w_dat$aces_percentage <- (w_dat[,7] / w_dat[,27])*100
w_dat$dbl_fault_percentage <- (w_dat[,8] / w_dat[,14])*100
w_dat$percent_first_serve_in <- (w_dat[,9] / w_dat[,10])*100
w_dat$percent_first_serve_won<- (w_dat[,11] / w_dat[,12])*100
w_dat$percent_second_serve_won<- (w_dat[,13] / w_dat[,14])*100
w_dat$percent_break_points_saved <- (w_dat[,15] / w_dat[,16])*100
# return percentages
w_dat$percent_first_serve_return_won <- (w_dat[,19] / w_dat[,20])*100
w_dat$percent_second_serve_return_won <- (w_dat[,21] / w_dat[,22])*100
w_dat$percent_break_points_converted <- (w_dat[,23] / w_dat[,24])*100
# percentage of point won
w_dat$percent_service_points_won <- (w_dat[,26] / w_dat[,27])*100
w_dat$percent_return_points_won  <- (w_dat[,28] / w_dat[,29])*100
w_dat$percent_total_points_won   <- (w_dat[,30] / w_dat[,31])*100
# replacing NaN's
w_dat[which(is.na(w_dat$percent_break_points_saved)),48] <- 100
w_dat[which(is.na(w_dat$percent_break_points_converted)),51] <- 0
w_dat[which(is.na(w_dat$seed)),32] <- 0
w_dat$seed <- as.factor(w_dat$seed)
str(w_dat$seed)
# Matching Player Hand -------------------------------------------------------
players <- read.csv("players.csv")
players <- players[ , -1]
plays <- players$plays
plays <- strsplit(plays, ",")
for (i in 1:773) {
players$hand[i] <- plays[[i]][1]
players$back[i] <- plays[[i]][2]
}
w_dat$player_A_hand <- players$hand[match(w_dat$name, players$players)]
w_dat$player_B_hand <- players$hand[match(w_dat$Opponent, players$players)]
View(w_dat)
library(readr)
colnames_match_stats <- c("match_id",
"tourney_slug",
"match_stats_url_suffix",
"match_time",
"match_duration",
"winner_slug",
"winner_serve_rating",
"winner_aces",
"winner_double_faults",
"winner_first_serves_in",
"winner_first_serves_total",
"winner_first_serve_points_won",
"winner_first_serve_points_total",
"winner_second_serve_points_won",
"winner_second_serve_points_total",
"winner_break_points_saved",
"winner_break_points_serve_total",
"winner_service_games_played",
"winner_return_rating",
"winner_first_serve_return_won",
"winner_first_serve_return_total",
"winner_second_serve_return_won",
"winner_second_serve_return_total",
"winner_break_points_converted",
"winner_break_points_return_total",
"winner_return_games_played",
"winner_service_points_won",
"winner_service_points_total",
"winner_return_points_won",
"winner_return_points_total",
"winner_total_points_won",
"winner_total_points_total",
"loser_slug",
"loser_serve_rating",
"loser_aces",
"loser_double_faults",
"loser_first_serves_in",
"loser_first_serves_total",
"loser_first_serve_points_won",
"loser_first_serve_points_total",
"loser_second_serve_points_won",
"loser_second_serve_points_total",
"loser_break_points_saved",
"loser_break_points_serve_total",
"loser_service_games_played",
"loser_return_rating",
"loser_first_serve_return_won",
"loser_first_serve_return_total",
"loser_second_serve_return_won",
"loser_second_serve_return_total",
"loser_break_points_converted",
"loser_break_points_return_total",
"loser_return_games_played",
"loser_service_points_won",
"loser_service_points_total",
"loser_return_points_won",
"loser_return_points_total",
"loser_total_points_won",
"loser_total_points_total")
colnames_match_scores <- c("tourney_year_id",
"tourney_order",
"tourney_name",
"tourney_slug",
"tourney_url_suffix",
"start_date",
"start_year",
"start_month",
"start_day",
"end_date",
"end_year",
"end_month",
"end_day",
"currency",
"prize_money",
"match_index",
"tourney_round_name",
"round_order",
"match_order",
"winner_name",
"winner_player_id",
"winner_slug",
"loser_name",
"loser_player_id",
"loser_slug",
"winner_seed",
"loser_seed",
"match_score_tiebreaks",
"winner_sets_won",
"loser_sets_won",
"winner_games_won",
"loser_games_won",
"winner_tiebreaks_won",
"loser_tiebreaks_won",
"match_id",
"match_stats_url_suffix")
colnames_tourney_stats<-c("tourney_year_id",
"tourney_order",
"tourney_type",
"tourney_name",
"tourney_id",
"tourney_slug",
"tourney_location",
"tourney_date",
"year",
"tourney_month",
"tourney_day",
"tourney_singles_draw",
"tourney_doubles_draw",
"tourney_conditions",
"tourney_surface",
"tourney_fin_commit_raw",
"currency",
"tourney_fin_commit",
"tourney_url_suffix",
"singles_winner_name",
"singles_winner_url",
"singles_winner_player_slug",
"singles_winner_player_id",
"doubles_winner_1_name",
"doubles_winner_1_url",
"doubles_winner_1_player_slug",
"doubles_winner_1_player_id",
"doubles_winner_2_name",
"doubles_winner_2_url",
"doubles_winner_2_player_slug",
"doubles_winner_2_player_id")
tourney_stats_2010_2019 <- read_csv("tournaments_2010-2019.csv", col_names = colnames_tourney_stats)
match_stats_2019 <- read_csv("match_stats_2019.csv", col_names = colnames_match_stats)
match_stats_2018 <- read_csv("match_stats_2018.csv", col_names = colnames_match_stats)
match_stats_2017 <- read_csv("match_stats_2017.csv", col_names = colnames_match_stats)
match_stats_2016 <- read_csv("match_stats_2016.csv", col_names = colnames_match_stats)
match_stats_2015 <- read_csv("match_stats_2015.csv", col_names = colnames_match_stats)
match_stats_2014 <- read_csv("match_stats_2014.csv", col_names = colnames_match_stats)
match_stats_2013 <- read_csv("match_stats_2013.csv", col_names = colnames_match_stats)
match_stats_2012 <- read_csv("match_stats_2012.csv", col_names = colnames_match_stats)
match_stats_2011 <- read_csv("match_stats_2011.csv", col_names = colnames_match_stats)
match_stats_2010 <- read_csv("match_stats_2010.csv", col_names = colnames_match_stats)
match_stats <- rbind(match_stats_2010, match_stats_2011, match_stats_2012,
match_stats_2013, match_stats_2014, match_stats_2015,
match_stats_2016, match_stats_2017, match_stats_2018,
match_stats_2019)
rm(match_stats_2010, match_stats_2011, match_stats_2012,
match_stats_2013, match_stats_2014, match_stats_2015,
match_stats_2016, match_stats_2017, match_stats_2018,
match_stats_2019)
match_scores <- read_csv("match_scores_2010-2019.csv", col_names = colnames_match_scores)
# Combine --------------------------------------------------------------------
match <- merge(match_stats, match_scores, by = "match_stats_url_suffix")
# Remove Qualifying ----------------------------------------------------------
match <- match[-which(grepl("Qualifying", match$tourney_round_name)), ]
View(match)
w_dat[which(w_dat$name == "	Oscar Hernandez")]
w_dat[which(w_dat$name == "	Oscar Hernandez"),]
w_dat[which(w_dat$name == "Oscar Hernandez"), ]
w_dat[which(w_dat$name == "Juan Ignacio Chela"), ]
t <- w_dat[which(w_dat$name == "Juan Ignacio Chela"), ]
View(t)
w_dat[which(w_dat$name == "Daniel Munoz de la Nava"), ]
w_dat[which(w_dat$name == "Marcel Granollers"), ]
w_dat[which(w_dat$name == "Pere Rib"), ]
w_dat[which(w_dat$name == "Pere Riba"), ]
w_dat[which(is.na(w_dat$seed)),32] <- 34
w_dat$seed <- as.factor(w_dat$seed)
str(w_dat$seed)
library(dplyr)
library(tidyverse)
library(lubridate)
library(magrittr)
library(caret)
library(stringr)
w_dat <- read.csv("finaldata2.csv")
w_dat <- w_dat[, -1]
w_dat$tournament_date <- lubridate::as_date(w_dat$tournament_date)
#w_dat$first_serve_percentage <- round((w_dat$first_serves_in/w_dat$first_serves_total)*100,3)
# We need to convert our data to percentages
# Percentages ----------------------------------------------------------------
# serve percentages
w_dat$aces_percentage <- (w_dat[,7] / w_dat[,27])*100
w_dat$dbl_fault_percentage <- (w_dat[,8] / w_dat[,14])*100
w_dat$percent_first_serve_in <- (w_dat[,9] / w_dat[,10])*100
w_dat$percent_first_serve_won<- (w_dat[,11] / w_dat[,12])*100
w_dat$percent_second_serve_won<- (w_dat[,13] / w_dat[,14])*100
w_dat$percent_break_points_saved <- (w_dat[,15] / w_dat[,16])*100
# return percentages
w_dat$percent_first_serve_return_won <- (w_dat[,19] / w_dat[,20])*100
w_dat$percent_second_serve_return_won <- (w_dat[,21] / w_dat[,22])*100
w_dat$percent_break_points_converted <- (w_dat[,23] / w_dat[,24])*100
# percentage of point won
w_dat$percent_service_points_won <- (w_dat[,26] / w_dat[,27])*100
w_dat$percent_return_points_won  <- (w_dat[,28] / w_dat[,29])*100
w_dat$percent_total_points_won   <- (w_dat[,30] / w_dat[,31])*100
# replacing NaN's
w_dat[which(is.na(w_dat$percent_break_points_saved)),48] <- 100
w_dat[which(is.na(w_dat$percent_break_points_converted)),51] <- 0
w_dat[which(is.na(w_dat$seed)),32] <- 34
w_dat$seed <- as.factor(w_dat$seed)
str(w_dat$seed)
# Matching Player Hand -------------------------------------------------------
players <- read.csv("players.csv")
players <- players[ , -1]
plays <- players$plays
plays <- strsplit(plays, ",")
for (i in 1:773) {
players$hand[i] <- plays[[i]][1]
players$back[i] <- plays[[i]][2]
}
w_dat$player_A_hand <- players$hand[match(w_dat$name, players$players)]
w_dat$player_B_hand <- players$hand[match(w_dat$Opponent, players$players)]
View(w_dat)
#Select serve and return ratings as our inital features
cols <- c(5:31, 33:35, 43:54)
w_dat <- w_dat[, c(1:4, 32, 36:42, 55:56, cols)]
which(is.na(w_dat))
which(is.na(w_dat[15:56]))
w_dat[15:56]
w_dat[, 15:56]
which(is.na(w_dat[, 15:56]))
#Didnt exclude NA!
temp <- w_dat[which(is.na(w_dat[, 15:56])),]
View(temp)
#Didnt exclude NA!
temp <- w_dat[which(is.na(w_dat[15:56])),]
View(temp)
View(w_dat)
w_dat[which(is.na(w_dat[15:56])),]
which(is.na(w_dat[, 15:56]))
w_dat[13058,]
w_dat[65728,]
which(complete.cases(w_dat[, 15:56]))
complete.cases(w_dat[, 15:56])
w_day[466,]
w_dat[466,]
#Didnt exclude NA!
temp <- w_dat[complete.cases(w_dat[, 15:56]),]
w_dat[467,]
#Didnt exclude NA!
temp <- w_dat[complete.cases(w_dat[15:56]),]
#Didnt exclude NA!
temp <- w_dat[complete.cases(w_dat),]
#Didnt exclude NA!
temp <- w_dat[complete.cases(w_dat[, 15:56]),]
library(dplyr)
library(tidyverse)
library(lubridate)
library(magrittr)
library(caret)
library(stringr)
w_dat <- read.csv("finaldata2.csv")
w_dat <- w_dat[, -1]
w_dat$tournament_date <- lubridate::as_date(w_dat$tournament_date)
#w_dat$first_serve_percentage <- round((w_dat$first_serves_in/w_dat$first_serves_total)*100,3)
# We need to convert our data to percentages
# Percentages ----------------------------------------------------------------
# serve percentages
w_dat$aces_percentage <- (w_dat[,7] / w_dat[,27])*100
w_dat$dbl_fault_percentage <- (w_dat[,8] / w_dat[,14])*100
w_dat$percent_first_serve_in <- (w_dat[,9] / w_dat[,10])*100
w_dat$percent_first_serve_won<- (w_dat[,11] / w_dat[,12])*100
w_dat$percent_second_serve_won<- (w_dat[,13] / w_dat[,14])*100
w_dat$percent_break_points_saved <- (w_dat[,15] / w_dat[,16])*100
# return percentages
w_dat$percent_first_serve_return_won <- (w_dat[,19] / w_dat[,20])*100
w_dat$percent_second_serve_return_won <- (w_dat[,21] / w_dat[,22])*100
w_dat$percent_break_points_converted <- (w_dat[,23] / w_dat[,24])*100
# percentage of point won
w_dat$percent_service_points_won <- (w_dat[,26] / w_dat[,27])*100
w_dat$percent_return_points_won  <- (w_dat[,28] / w_dat[,29])*100
w_dat$percent_total_points_won   <- (w_dat[,30] / w_dat[,31])*100
# replacing NaN's
w_dat[which(is.na(w_dat$percent_break_points_saved)),48] <- 100
w_dat[which(is.na(w_dat$percent_break_points_converted)),51] <- 0
w_dat[which(is.na(w_dat$seed)),32] <- 34
w_dat$seed <- as.factor(w_dat$seed)
str(w_dat$seed)
# Matching Player Hand -------------------------------------------------------
players <- read.csv("players.csv")
players <- players[ , -1]
plays <- players$plays
plays <- strsplit(plays, ",")
for (i in 1:773) {
players$hand[i] <- plays[[i]][1]
players$back[i] <- plays[[i]][2]
}
w_dat$player_A_hand <- players$hand[match(w_dat$name, players$players)]
w_dat$player_B_hand <- players$hand[match(w_dat$Opponent, players$players)]
# Selecting Features --------------------------------------------------------
#Select serve and return ratings as our inital features
cols <- c(5:31, 33:35, 43:54)
w_dat <- w_dat[, c(1:4, 32, 36:42, 55:56, cols)]
#Exclude NA!
w_dat <- w_dat[complete.cases(w_dat[, 15:56]),]
data <- w_dat
months = 24
library(dplyr)
library(tidyverse)
library(lubridate)
library(magrittr)
library(caret)
library(stringr)
w_dat <- read.csv("finaldata2.csv")
w_dat <- w_dat[, -1]
w_dat$tournament_date <- lubridate::as_date(w_dat$tournament_date)
#w_dat$first_serve_percentage <- round((w_dat$first_serves_in/w_dat$first_serves_total)*100,3)
# We need to convert our data to percentages
# Percentages ----------------------------------------------------------------
# serve percentages
w_dat$aces_percentage <- (w_dat[,7] / w_dat[,27])*100
w_dat$dbl_fault_percentage <- (w_dat[,8] / w_dat[,14])*100
w_dat$percent_first_serve_in <- (w_dat[,9] / w_dat[,10])*100
w_dat$percent_first_serve_won<- (w_dat[,11] / w_dat[,12])*100
w_dat$percent_second_serve_won<- (w_dat[,13] / w_dat[,14])*100
w_dat$percent_break_points_saved <- (w_dat[,15] / w_dat[,16])*100
# return percentages
w_dat$percent_first_serve_return_won <- (w_dat[,19] / w_dat[,20])*100
w_dat$percent_second_serve_return_won <- (w_dat[,21] / w_dat[,22])*100
w_dat$percent_break_points_converted <- (w_dat[,23] / w_dat[,24])*100
# percentage of point won
w_dat$percent_service_points_won <- (w_dat[,26] / w_dat[,27])*100
w_dat$percent_return_points_won  <- (w_dat[,28] / w_dat[,29])*100
w_dat$percent_total_points_won   <- (w_dat[,30] / w_dat[,31])*100
# replacing NaN's
w_dat[which(is.na(w_dat$percent_break_points_saved)),48] <- 100
w_dat[which(is.na(w_dat$percent_break_points_converted)),51] <- 0
w_dat[which(is.na(w_dat$seed)),32] <- 34
w_dat$seed <- as.factor(w_dat$seed)
str(w_dat$seed)
# Matching Player Hand -------------------------------------------------------
players <- read.csv("players.csv")
players <- players[ , -1]
plays <- players$plays
plays <- strsplit(plays, ",")
for (i in 1:773) {
players$hand[i] <- plays[[i]][1]
players$back[i] <- plays[[i]][2]
}
w_dat$player_A_hand <- players$hand[match(w_dat$name, players$players)]
w_dat$player_B_hand <- players$hand[match(w_dat$Opponent, players$players)]
# Selecting Features --------------------------------------------------------
#Select serve and return ratings as our inital features
cols <- c(5:31, 33:35, 43:54)
w_dat <- w_dat[, c(1:4, 32, 36:42, 55:56, cols)]
#Exclude NA!
w_dat <- w_dat[complete.cases(w_dat[, 15:56]),]
data <- w_dat
months = 24
average_past_games <- function(data, columns = c(5, 6), months = 24){
n <- nrow(data)
player <- unique(data$name)
return_matrix <- matrix(0, nrow = 1, ncol = ncol(data) + length(columns))
colnames(return_matrix) <- c(colnames(data), colnames(data)[columns])
for(i in player){
dat <- data %>% filter(name == i)
player_dat <- matrix(0, nrow = 1, ncol = ncol(data) + length(columns))
colnames(player_dat) <- colnames(return_matrix)
for(j in 1:nrow(dat)){ # This include all matches in a tournament, even if we are in the quarters. Thus, we need to remove the semis etc
matches <- dat %>% filter(dat$tournament_date <= dat$tournament_date[j] & dat$tournament_date >= (dat$tournament_date[j] - months(months)))
if(j == 1){ #The first game has no ytd from before
average <- as.data.frame(t(c(0,0)))
colnames(average) <- colnames(data)[columns]
}
else{
ind <- which(matches$Match_ID == dat$Match_ID[j])  #Find which j we are in matches, and throw older stuff away
matches <- matches[1:(ind-1), ]
average <- matches %>% select(columns) %>% summarise_if(is.numeric, mean)
}
player_dat <- rbind(player_dat, cbind(dat[j, ], average))
}
return_matrix <- rbind(return_matrix, player_dat[-1, ])
}
return(return_matrix[-1, ])
}
View(w_dat)
rolling_average_all <- average_past_games(w_dat, 15:56)
write.csv(rolling_average_all, file = "C:/Users/Adam Bresler/Documents/GitHub/Statistics-Honours-Project/Data/rolling_average_all.csv")
debugSource('~/GitHub/Statistics-Honours-Project/YTD_Script.R', echo=TRUE)
View(return_matrix)
average <- as.data.frame(t(c(0,0)))
View(average)
average <- as.data.frame(t(rep(0, length(cols))))
View(average)
colnames(average) <- colnames(data)[cols]
View(average)
cols
colnames(data)[cols]
View(data)
average_past_games <- function(data, columns = c(5, 6), months = 24){
n <- nrow(data)
player <- unique(data$name)
return_matrix <- matrix(0, nrow = 1, ncol = ncol(data) + length(columns))
colnames(return_matrix) <- c(colnames(data), colnames(data)[columns])
for(i in player){
dat <- data %>% filter(name == i)
player_dat <- matrix(0, nrow = 1, ncol = ncol(data) + length(columns))
colnames(player_dat) <- colnames(return_matrix)
for(j in 1:nrow(dat)){ # This include all matches in a tournament, even if we are in the quarters. Thus, we need to remove the semis etc
matches <- dat %>% filter(dat$tournament_date <= dat$tournament_date[j] & dat$tournament_date >= (dat$tournament_date[j] - months(months)))
if(j == 1){ #The first game has no ytd from before
average <- as.data.frame(t(rep(0, length(columns))))
colnames(average) <- colnames(data)[columns]
}
else{
ind <- which(matches$Match_ID == dat$Match_ID[j])  #Find which j we are in matches, and throw older stuff away
matches <- matches[1:(ind-1), ]
average <- matches %>% select(columns) %>% summarise_if(is.numeric, mean)
}
player_dat <- rbind(player_dat, cbind(dat[j, ], average))
}
return_matrix <- rbind(return_matrix, player_dat[-1, ])
}
return(return_matrix[-1, ])
}
average_past_games <- function(data, columns, months = 24){
n <- nrow(data)
player <- unique(data$name)
return_matrix <- matrix(0, nrow = 1, ncol = ncol(data) + length(columns))
colnames(return_matrix) <- c(colnames(data), colnames(data)[columns])
for(i in player){
dat <- data %>% filter(name == i)
player_dat <- matrix(0, nrow = 1, ncol = ncol(data) + length(columns))
colnames(player_dat) <- colnames(return_matrix)
for(j in 1:nrow(dat)){ # This include all matches in a tournament, even if we are in the quarters. Thus, we need to remove the semis etc
matches <- dat %>% filter(dat$tournament_date <= dat$tournament_date[j] & dat$tournament_date >= (dat$tournament_date[j] - months(months)))
if(j == 1){ #The first game has no ytd from before
average <- as.data.frame(t(rep(0, length(columns))))
colnames(average) <- colnames(data)[columns]
}
else{
ind <- which(matches$Match_ID == dat$Match_ID[j])  #Find which j we are in matches, and throw older stuff away
matches <- matches[1:(ind-1), ]
average <- matches %>% select(columns) %>% summarise_if(is.numeric, mean)
}
player_dat <- rbind(player_dat, cbind(dat[j, ], average))
}
return_matrix <- rbind(return_matrix, player_dat[-1, ])
}
return(return_matrix[-1, ])
}
rolling_average_all <- average_past_games(w_dat, 15:56)
View(rolling_average_all)
write.csv(rolling_average_all, file = "C:/Users/Adam Bresler/Documents/GitHub/Statistics-Honours-Project/Data/rolling_average_all.csv")
View(rolling_average_all)
