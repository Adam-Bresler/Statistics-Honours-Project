"currency",
"prize_money",
"match_index",
"tourney_round_name",
"round_order",
"match_order",
"winner_name",
"winner_player_id",
"winner_slug",
"loser_name",
"loser_player_id",
"loser_slug",
"winner_seed",
"loser_seed",
"match_score_tiebreaks",
"winner_sets_won",
"loser_sets_won",
"winner_games_won",
"loser_games_won",
"winner_tiebreaks_won",
"loser_tiebreaks_won",
"match_id",
"match_stats_url_suffix")
colnames_tourney_stats<-c("tourney_year_id",
"tourney_order",
"tourney_type",
"tourney_name",
"tourney_id",
"tourney_slug",
"tourney_location",
"tourney_date",
"year",
"tourney_month",
"tourney_day",
"tourney_singles_draw",
"tourney_doubles_draw",
"tourney_conditions",
"tourney_surface",
"tourney_fin_commit_raw",
"currency",
"tourney_fin_commit",
"tourney_url_suffix",
"singles_winner_name",
"singles_winner_url",
"singles_winner_player_slug",
"singles_winner_player_id",
"doubles_winner_1_name",
"doubles_winner_1_url",
"doubles_winner_1_player_slug",
"doubles_winner_1_player_id",
"doubles_winner_2_name",
"doubles_winner_2_url",
"doubles_winner_2_player_slug",
"doubles_winner_2_player_id")
tourney_stats_2010_2019 <- read_csv("tournaments_2010-2019.csv", col_names = colnames_tourney_stats)
match_stats_2019 <- read_csv("match_stats_2019.csv", col_names = colnames_match_stats)
match_stats_2018 <- read_csv("match_stats_2018.csv", col_names = colnames_match_stats)
match_stats_2017 <- read_csv("match_stats_2017.csv", col_names = colnames_match_stats)
match_stats_2016 <- read_csv("match_stats_2016.csv", col_names = colnames_match_stats)
match_stats_2015 <- read_csv("match_stats_2015.csv", col_names = colnames_match_stats)
match_stats_2014 <- read_csv("match_stats_2014.csv", col_names = colnames_match_stats)
match_stats_2013 <- read_csv("match_stats_2013.csv", col_names = colnames_match_stats)
match_stats_2012 <- read_csv("match_stats_2012.csv", col_names = colnames_match_stats)
match_stats_2011 <- read_csv("match_stats_2011.csv", col_names = colnames_match_stats)
match_stats_2010 <- read_csv("match_stats_2010.csv", col_names = colnames_match_stats)
match_stats <- rbind(match_stats_2010, match_stats_2011, match_stats_2012,
match_stats_2013, match_stats_2014, match_stats_2015,
match_stats_2016, match_stats_2017, match_stats_2018,
match_stats_2019)
rm(match_stats_2010, match_stats_2011, match_stats_2012,
match_stats_2013, match_stats_2014, match_stats_2015,
match_stats_2016, match_stats_2017, match_stats_2018,
match_stats_2019)
match_scores <- read_csv("match_scores_2010-2019.csv", col_names = colnames_match_scores)
w_dat <- read.csv("finaldata2.csv")
# Combine --------------------------------------------------------------------
match <- merge(match_stats, match_scores, by = "match_stats_url_suffix")
# Remove Qualifying ----------------------------------------------------------
match <- match[-which(grepl("Qualifying", match$tourney_round_name)), ]
# Get rid of columns ---------------------------------------------------------
colnames(match)
View(match)
View(w_dat)
w_dat <- w_dat[, -1]
w_dat$tournament_date <- lubridate::as_date(w_dat$tournament_date)
# Creating the predictive ----------------------------------------------------
data <- read.csv("rolling_average_serve_return.csv")
data <- data[,-1]
data <- read.csv("rolling_average_serve_return.csv")
data <- data[,-1]
#Eventually, add this into loop
colnames(data)[c(10,11)] <- c("average_serve_rating", "average_return_rating")
predictive <- data %>%
group_by(Match_ID)%>%arrange(.by_group = TRUE)
predictive2 <- data %>%
group_by(Match_ID)%>%arrange(.by_group = TRUE)%>%
select(c(1,10,11))
predictive3 <- predictive[seq(1,52668,2),-c(10,11)]
first_player<-predictive2[seq(1,52668,2),-1]
second_player<-predictive2[seq(2,52668,2),-1]
difference <- first_player-second_player
predictive_dataset <- cbind(predictive3,difference)
rm(predictive, predictive2, predictive3, second_player, first_player, difference)
colnames(predictive_dataset)[c(2,3)] <- c("Player_A", "Player_B")
predictive_dataset$wl <- ifelse(predictive_dataset$wl == 'winner', "Player A", "Player B")
predictive_dataset$wl <- as.factor(predictive_dataset$wl)
# Creating the predictive ----------------------------------------------------
data <- read.csv("rolling_average_serve_return.csv")
data <- data[,-1]
#Eventually, add this into loop
colnames(data)[c(10,11)] <- c("average_serve_rating", "average_return_rating")
predictive <- data %>%
group_by(Match_ID)%>%arrange(.by_group = TRUE)
predictive2 <- data %>%
group_by(Match_ID)%>%arrange(.by_group = TRUE)%>%
select(c(1,10,11))
predictive3 <- predictive[seq(1,52668,2),-c(10,11)]
# Creating the predictive ----------------------------------------------------
data <- read.csv("rolling_average_serve_return.csv")
data <- data[,-1]
#Eventually, add this into loop
colnames(data)[c(10,11)] <- c("average_serve_rating", "average_return_rating")
predictive <- data %>%
group_by(Match_ID)%>%arrange(.by_group = TRUE)
library(dplyr)
library(tidyverse)
library(lubridate)
library(magrittr)
library(caret)
predictive <- data %>%
group_by(Match_ID)%>%arrange(.by_group = TRUE)
predictive2 <- data %>%
group_by(Match_ID)%>%arrange(.by_group = TRUE)%>%
select(c(1,10,11))
predictive3 <- predictive[seq(1,52668,2),-c(10,11)]
first_player<-predictive2[seq(1,52668,2),-1]
second_player<-predictive2[seq(2,52668,2),-1]
difference <- first_player-second_player
predictive_dataset <- cbind(predictive3,difference)
rm(predictive, predictive2, predictive3, second_player, first_player, difference)
colnames(predictive_dataset)[c(2,3)] <- c("Player_A", "Player_B")
predictive_dataset$wl <- ifelse(predictive_dataset$wl == 'winner', "Player A", "Player B")
predictive_dataset$wl <- as.factor(predictive_dataset$wl)
View(predictive_dataset)
View(data)
View(tourney_stats_2010_2019)
match$start_date <- lubridate::ymd(match$start_date)
match$match_order <- substr(match$match_index, 3, 5)
match$match_order <- as.numeric(match$match_order)
match <- match[order(match$start_date, decreasing = TRUE),]
View(data)
final_data <- read.csv('data_no_ytd.csv')
final_data <- final_data[, -1]
players_names<-unique(final_data$name)
final_data_2 <- matrix(0,nrow=1,ncol=42)
colnames(final_data_2) <- colnames(final_data)
for(i in players_names){
current_data <- final_data[which(final_data$name==i),]
rows<- order(final_data[which(final_data$name==i),"tournament_date"],decreasing = FALSE)
current_data <- current_data[rows,]
tourney_dates<-unique(current_data$tournament_date)
current_player_data<- matrix(0,nrow=1,ncol=42)
colnames(current_player_data) <- colnames(final_data)
for(i in tourney_dates){
current_data2 <- current_data[which(current_data$tournament_date==i),]
rows2<- order(current_data2[which(current_data2$tournament_date==i),"Match_order"],decreasing = TRUE)
current_data2 <- current_data2[rows2,]
current_player_data <- rbind(current_player_data,current_data2)
}
final_data_2 <- rbind(final_data_2,current_player_data[-1,])
}
final_data_2 <- final_data_2[-1,]
temp <- read.csv("data_no_ytd.csv")
View(temp)
View(final_data_2)
View(w_dat)
library(dplyr)
library(tidyverse)
library(lubridate)
library(magrittr)
library(caret)
w_dat <- read.csv("finaldata2.csv")
w_dat <- w_dat[, -1]
w_dat$tournament_date <- lubridate::as_date(w_dat$tournament_date)
# Matching Player Hand -------------------------------------------------------
players <- read.csv("players.csv")
View(players)
players <- players[ , -1]
View(players)
View(w_dat)
data <- read.csv("rolling_average_serve_return.csv")
data <- data[,-1]
#Eventually, add this into loop
colnames(data)[c(10,11)] <- c("average_serve_rating", "average_return_rating")
predictive <- data %>%
group_by(Match_ID)%>%arrange(.by_group = TRUE)
predictive2 <- data %>%
group_by(Match_ID)%>%arrange(.by_group = TRUE)%>%
select(c(1,10,11))
predictive3 <- predictive[seq(1,52668,2),-c(10,11)]
first_player<-predictive2[seq(1,52668,2),-1]
second_player<-predictive2[seq(2,52668,2),-1]
difference <- first_player-second_player
predictive_dataset <- cbind(predictive3,difference)
rm(predictive, predictive2, predictive3, second_player, first_player, difference)
colnames(predictive_dataset)[c(2,3)] <- c("Player_A", "Player_B")
predictive_dataset$wl <- ifelse(predictive_dataset$wl == 'winner', "Player A", "Player B")
predictive_dataset$wl <- as.factor(predictive_dataset$wl)
View(predictive_dataset)
View(players)
View(players)
plays <- split(plays)
?split
plays <- players$plays
library(stringr)
plays <- strsplit(plays, ",")
View(plays)
plays <- strsplit(plays, ",")[1]
plays <- players$plays
hand <- strsplit(plays, ",")[1]
View(hand)
plays <- players$plays
plays <- strsplit(plays, ",")
unlist(plays)
t <- unlist(plays)
t <- unlist(plays)[ c(TRUE,FALSE) ]
t
View(players)
View(plays)
length(plays)
i = 1
hand <- plays[[i]]
hand <- plays[[i]][1]
for (i in length(plays)) {
players$hand[i] <- plays[[i]][1]
players$back[i] <- plays[[i]][2]
}
View(players)
debugSource('~/GitHub/Statistics-Honours-Project/YTD_Script.R', echo=TRUE)
View(players)
plays[[i]][1]
plays[[i]][2]
hand <- rep(NA, 773)
back <- rep(NA, 773)
for (i in length(plays)) {
hand[i] <- plays[[i]][1]
back[i] <- plays[[i]][2]
}
i=1
plays[[i]][1]
hand[i]
hand[i] <- plays[[i]][1]
source('~/GitHub/Statistics-Honours-Project/YTD_Script.R', echo=TRUE)
for (i in length(plays)) {
hand[i] <- plays[[i]][1]
back[i] <- plays[[i]][2]
}
hand <- c()
back <- c()
for (i in length(plays)) {
hand[i] <- plays[[i]][1]
back[i] <- plays[[i]][2]
}
for (i in 1:773) {
hand[i] <- plays[[i]][1]
back[i] <- plays[[i]][2]
}
for (i in 1:773) {
players$hand[i] <- plays[[i]][1]
players$back[i] <- plays[[i]][2]
}
View(players)
match(w_dat$name, players$players)
w_dat$player_A_hand <- match(w_dat$name, players$players) %>% select("hand")
match(w_dat$name, players$players) %>% filter(w_dat)
players <- players[,c("players", "hand")]
View(players)
w_dat <- merge(w_dat, players, by = "name")
w_dat$player_A_hand <- players$hand[match(w_dat$name, players$players)]
View(w_dat)
w_dat$player_B_hand <- players$hand[match(w_dat$Opponent, players$players)]
View(w_dat)
library(dplyr)
library(tidyverse)
library(lubridate)
library(magrittr)
library(caret)
library(stringr)
w_dat <- read.csv("finaldata2.csv")
w_dat <- w_dat[, -1]
w_dat$tournament_date <- lubridate::as_date(w_dat$tournament_date)
#w_dat$first_serve_percentage <- round((w_dat$first_serves_in/w_dat$first_serves_total)*100,3)
# We need to convert our data to percentages
# Percentages ----------------------------------------------------------------
# serve percentages
w_dat$aces_percentage <- (w_dat[,7] / w_dat[,27])*100
w_dat$dbl_fault_percentage <- (w_dat[,8] / w_dat[,14])*100
w_dat$percent_first_serve_in <- (w_dat[,9] / w_dat[,10])*100
w_dat$percent_first_serve_won<- (w_dat[,11] / w_dat[,12])*100
w_dat$percent_second_serve_won<- (w_dat[,13] / w_dat[,14])*100
w_dat$percent_break_points_saved <- (w_dat[,15] / w_dat[,16])*100
# return percentages
w_dat$percent_first_serve_return_won <- (w_dat[,19] / w_dat[,20])*100
w_dat$percent_second_serve_return_won <- (w_dat[,21] / w_dat[,22])*100
w_dat$percent_break_points_converted <- (w_dat[,23] / w_dat[,24])*100
# percentage of point won
w_dat$percent_service_points_won <- (w_dat[,26] / w_dat[,27])*100
w_dat$percent_return_points_won  <- (w_dat[,28] / w_dat[,29])*100
w_dat$percent_total_points_won   <- (w_dat[,30] / w_dat[,31])*100
# replacing NaN's
w_dat[which(is.na(w_dat$percent_break_points_saved)),48] <- 100
w_dat[which(is.na(w_dat$percent_break_points_converted)),51] <- 0
# Matching Player Hand -------------------------------------------------------
players <- read.csv("players.csv")
players <- players[ , -1]
plays <- players$plays
plays <- strsplit(plays, ",")
for (i in 1:773) {
players$hand[i] <- plays[[i]][1]
players$back[i] <- plays[[i]][2]
}
players <- players[,c("players", "hand")]
colnames(players) <- c("name", "hand")
w_dat$player_A_hand <- players$hand[match(w_dat$name, players$players)]
w_dat$player_B_hand <- players$hand[match(w_dat$Opponent, players$players)]
View(w_dat)
w_dat$player_A_hand <- players$hand[match(w_dat$name, players$players)]
w_dat$player_B_hand <- players$hand[match(w_dat$Opponent, players$players)]
players <- read.csv("players.csv")
players <- players[ , -1]
plays <- players$plays
plays <- strsplit(plays, ",")
for (i in 1:773) {
players$hand[i] <- plays[[i]][1]
players$back[i] <- plays[[i]][2]
}
players <- players[,c("players", "hand")]
colnames(players) <- c("name", "hand")
w_dat$player_A_hand <- players$hand[match(w_dat$name, players$players)]
w_dat$player_B_hand <- players$hand[match(w_dat$Opponent, players$players)]
View(w_dat)
View(players)
players <- read.csv("players.csv")
players <- players[ , -1]
plays <- players$plays
plays <- strsplit(plays, ",")
for (i in 1:773) {
players$hand[i] <- plays[[i]][1]
players$back[i] <- plays[[i]][2]
}
w_dat$player_A_hand <- players$hand[match(w_dat$name, players$players)]
w_dat$player_B_hand <- players$hand[match(w_dat$Opponent, players$players)]
View(w_dat)
str(w_dat$seed)
as.factor(w_dat$seed)
w_dat[which(is.na(w_dat$seed)),32] <- 0
as.factor(w_dat$seed)
w_dat$seed <- as.factor(w_dat$seed)
str(w_dat$seed)
# Read in data ---------------------------------------------------------------
library(readr)
colnames_match_stats <- c("match_id",
"tourney_slug",
"match_stats_url_suffix",
"match_time",
"match_duration",
"winner_slug",
"winner_serve_rating",
"winner_aces",
"winner_double_faults",
"winner_first_serves_in",
"winner_first_serves_total",
"winner_first_serve_points_won",
"winner_first_serve_points_total",
"winner_second_serve_points_won",
"winner_second_serve_points_total",
"winner_break_points_saved",
"winner_break_points_serve_total",
"winner_service_games_played",
"winner_return_rating",
"winner_first_serve_return_won",
"winner_first_serve_return_total",
"winner_second_serve_return_won",
"winner_second_serve_return_total",
"winner_break_points_converted",
"winner_break_points_return_total",
"winner_return_games_played",
"winner_service_points_won",
"winner_service_points_total",
"winner_return_points_won",
"winner_return_points_total",
"winner_total_points_won",
"winner_total_points_total",
"loser_slug",
"loser_serve_rating",
"loser_aces",
"loser_double_faults",
"loser_first_serves_in",
"loser_first_serves_total",
"loser_first_serve_points_won",
"loser_first_serve_points_total",
"loser_second_serve_points_won",
"loser_second_serve_points_total",
"loser_break_points_saved",
"loser_break_points_serve_total",
"loser_service_games_played",
"loser_return_rating",
"loser_first_serve_return_won",
"loser_first_serve_return_total",
"loser_second_serve_return_won",
"loser_second_serve_return_total",
"loser_break_points_converted",
"loser_break_points_return_total",
"loser_return_games_played",
"loser_service_points_won",
"loser_service_points_total",
"loser_return_points_won",
"loser_return_points_total",
"loser_total_points_won",
"loser_total_points_total")
colnames_match_scores <- c("tourney_year_id",
"tourney_order",
"tourney_name",
"tourney_slug",
"tourney_url_suffix",
"start_date",
"start_year",
"start_month",
"start_day",
"end_date",
"end_year",
"end_month",
"end_day",
"currency",
"prize_money",
"match_index",
"tourney_round_name",
"round_order",
"match_order",
"winner_name",
"winner_player_id",
"winner_slug",
"loser_name",
"loser_player_id",
"loser_slug",
"winner_seed",
"loser_seed",
"match_score_tiebreaks",
"winner_sets_won",
"loser_sets_won",
"winner_games_won",
"loser_games_won",
"winner_tiebreaks_won",
"loser_tiebreaks_won",
"match_id",
"match_stats_url_suffix")
colnames_tourney_stats<-c("tourney_year_id",
"tourney_order",
"tourney_type",
"tourney_name",
"tourney_id",
"tourney_slug",
"tourney_location",
"tourney_date",
"year",
"tourney_month",
"tourney_day",
"tourney_singles_draw",
"tourney_doubles_draw",
"tourney_conditions",
"tourney_surface",
"tourney_fin_commit_raw",
"currency",
"tourney_fin_commit",
"tourney_url_suffix",
"singles_winner_name",
"singles_winner_url",
"singles_winner_player_slug",
"singles_winner_player_id",
"doubles_winner_1_name",
"doubles_winner_1_url",
"doubles_winner_1_player_slug",
"doubles_winner_1_player_id",
"doubles_winner_2_name",
"doubles_winner_2_url",
"doubles_winner_2_player_slug",
"doubles_winner_2_player_id")
tourney_stats_2010_2019 <- read_csv("tournaments_2010-2019.csv", col_names = colnames_tourney_stats)
match_stats_2019 <- read_csv("match_stats_2019.csv", col_names = colnames_match_stats)
match_stats_2018 <- read_csv("match_stats_2018.csv", col_names = colnames_match_stats)
match_stats_2017 <- read_csv("match_stats_2017.csv", col_names = colnames_match_stats)
match_stats_2016 <- read_csv("match_stats_2016.csv", col_names = colnames_match_stats)
match_stats_2015 <- read_csv("match_stats_2015.csv", col_names = colnames_match_stats)
match_stats_2014 <- read_csv("match_stats_2014.csv", col_names = colnames_match_stats)
match_stats_2013 <- read_csv("match_stats_2013.csv", col_names = colnames_match_stats)
match_stats_2012 <- read_csv("match_stats_2012.csv", col_names = colnames_match_stats)
match_stats_2011 <- read_csv("match_stats_2011.csv", col_names = colnames_match_stats)
match_stats_2010 <- read_csv("match_stats_2010.csv", col_names = colnames_match_stats)
match_stats <- rbind(match_stats_2010, match_stats_2011, match_stats_2012,
match_stats_2013, match_stats_2014, match_stats_2015,
match_stats_2016, match_stats_2017, match_stats_2018,
match_stats_2019)
rm(match_stats_2010, match_stats_2011, match_stats_2012,
match_stats_2013, match_stats_2014, match_stats_2015,
match_stats_2016, match_stats_2017, match_stats_2018,
match_stats_2019)
match_scores <- read_csv("match_scores_2010-2019.csv", col_names = colnames_match_scores)
# Combine --------------------------------------------------------------------
match <- merge(match_stats, match_scores, by = "match_stats_url_suffix")
View(match)
match[19,]
View(w_dat)
